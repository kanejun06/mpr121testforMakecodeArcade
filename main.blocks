<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="N_ZR45;A~zZ=5OQ`Akf5" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="N4[7~$iy`o)%uem9oLJt"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MPR121A {" line1="    const ADDR = 0x5B" line2="    let started = false" line3="    let prevMask = 0" line4="    let i2c: I2C" line5="" line6="    // --- レジスタ定義 ---" line7="    const REG_TS_L = 0x00, REG_TS_H = 0x01, REG_SOFTRESET = 0x80" line8="    const REG_ECR = 0x5E, REG_DEB = 0x5B, REG_CFG1 = 0x5C, REG_CFG2 = 0x5D" line9="    const REG_MHDR = 0x2B, REG_NHDR = 0x2C, REG_NCLR = 0x2D, REG_FDLR = 0x2E" line10="    const REG_MHDF = 0x2F, REG_NHDF = 0x30, REG_NCLF = 0x31, REG_FDLF = 0x32" line11="    const REG_NHDT = 0x33, REG_NCLT = 0x34, REG_FDLT = 0x35" line12="    function REG_TTH(k: number) { return 0x41 + k * 2 }" line13="    function REG_RTH(k: number) { return 0x42 + k * 2 }" line14="" line15="    // --- ハンドラ格納 ---" line16="    const pressedHandlers: ((k: number) =&gt; void)[] = []" line17="    const releasedHandlers: ((k: number) =&gt; void)[] = []" line18="" line19="    // --- I2C ヘルパ ---" line20="    function w8(reg: number, val: number) {" line21="        const b = pins.createBuffer(2)" line22="        b.setNumber(NumberFormat.UInt8LE, 0, reg)" line23="        b.setNumber(NumberFormat.UInt8LE, 1, val &amp; 0xFF)" line24="        i2c.writeBuffer(ADDR, b)" line25="    }" line26="    function r8(reg: number): number {" line27="        const w = pins.createBuffer(1)" line28="        w.setNumber(NumberFormat.UInt8LE, 0, reg)" line29="        i2c.writeBuffer(ADDR, w)" line30="        const rb = i2c.readBuffer(ADDR, 1)" line31="        return rb.getNumber(NumberFormat.UInt8LE, 0)" line32="    }" line33="    function readMask(): number {" line34="        const l = r8(REG_TS_L), h = r8(REG_TS_H)" line35="        return ((h &lt;&lt; 8) | l) &amp; 0x0FFF" line36="    }" line37="" line38="    // --- 初期化 ---" line39="    function initOnce() {" line40="        if (started) return" line41="        started = true" line42="" line43="        // SDA=20, SCL=19, FREQ=100kHz, MODE=0, address=0" line44="        i2c = pins.createI2C(pins.SDA, pins.SCL)" line45="" line46="        // ソフトリセット→停止" line47="        w8(REG_SOFTRESET, 0x63); pause(5)" line48="        w8(REG_ECR, 0x00); pause(5)" line49="" line50="        // 推奨フィルタ設定" line51="        w8(REG_MHDR, 0x01); w8(REG_NHDR, 0x01); w8(REG_NCLR, 0x00); w8(REG_FDLR, 0x00)" line52="        w8(REG_MHDF, 0x01); w8(REG_NHDF, 0x01); w8(REG_NCLF, 0xFF); w8(REG_FDLF, 0x02)" line53="        w8(REG_NHDT, 0x01); w8(REG_NCLT, 0xFF); w8(REG_FDLT, 0x02)" line54="" line55="        w8(REG_DEB, 0x00); w8(REG_CFG1, 0x10); w8(REG_CFG2, 0x24)" line56="" line57="        // 閾値設定" line58="        for (let k = 0; k &lt; 12; k++) { w8(REG_TTH(k), 12); w8(REG_RTH(k), 6) }" line59="" line60="        // 起動（12電極有効）" line61="        w8(REG_ECR, 0x8F); pause(5)" line62="        prevMask = readMask()" line63="" line64="        // ポーリング（50msごと）" line65="        game.onUpdateInterval(50, function () {" line66="            const m = readMask()" line67="            const diff = m ^ prevMask" line68="            if (diff) {" line69="                for (let n = 0; n &lt; 12; n++) {" line70="                    const bit = 1 &lt;&lt; n" line71="                    if (diff &amp; bit) {" line72="                        if (m &amp; bit) pressedHandlers.forEach(h =&gt; h(n))" line73="                        else releasedHandlers.forEach(h =&gt; h(n))" line74="                    }" line75="                }" line76="                prevMask = m" line77="            }" line78="        })" line79="    }" line80="" line81="" line82="    // --- API（初期化は内部で自動実行） ---" line83="    export function onPressed(handler: (key: number) =&gt; void) {" line84="        initOnce()" line85="        pressedHandlers.push(handler)" line86="    }" line87="    export function onReleased(handler: (key: number) =&gt; void) {" line88="        initOnce()" line89="        releasedHandlers.push(handler)" line90="    }" line91="}" numlines="92"></mutation></block></statement></block></xml>